(module
  (type $0 (func (param i32 i64) (result i64)))
  (type $1 (func (param i64)))
  (type $2 (func (param i32)))
  (type $3 (func))

  (type $f (func (param i32 i64) (result i64)))
  (type $ct (cont $f))
  (type $fyield (func (result i64)))
  (type $cyield (cont $fyield))

  ;; (import "env" "yield" (func $0 (type 1)))
  ;; (import "env" "handle" (func $1 (type 0)))
  (import "wasi_snapshot_preview1" "proc_exit" (func $0 (type 2)))
  (import "wasi_snapshot_preview1" "proc_exit" (func $1 (type 2)))

  (import "wasi_snapshot_preview1" "proc_exit" (func $2 (type 2)))

  (tag $yield (param i64))

  (memory $0 2)
  (func $3
    (type 3)
    (local i64 i64 i64 i64 i64 i64 i64 i64 i64 i32)
    (block
      (i32.const 1_024)
      (i32.load)
      (i32.eqz)
      (if
        (then
          (i32.const 1_024)
          (i32.const 1)
          (i32.store)
          (i32.const 5)
          (i64.const 0)
          (call $wasmfx_handle)
          (local.set 0)
          (i32.const 5)
          (i64.const 1)
          (call $wasmfx_handle)
          (local.set 1)
          (i32.const 5)
          (i64.const 2)
          (call $wasmfx_handle)
          (local.set 2)
          (i32.const 5)
          (i64.const 3)
          (call $wasmfx_handle)
          (local.set 3)
          (i32.const 5)
          (i64.const 4)
          (call $wasmfx_handle)
          (local.set 4)
          (i32.const 5)
          (i64.const 5)
          (call $wasmfx_handle)
          (local.set 5)
          (i32.const 5)
          (i64.const 6)
          (call $wasmfx_handle)
          (local.set 6)
          (i32.const 5)
          (i64.const 7)
          (call $wasmfx_handle)
          (local.set 7)
          (i32.const 5)
          (i64.const 8)
          (call $wasmfx_handle)
          (local.set 8)
          (i32.const 5)
          (i64.const 9)
          (call $wasmfx_handle)
          (local.get 8)
          (local.get 7)
          (local.get 6)
          (local.get 5)
          (local.get 4)
          (local.get 3)
          (local.get 2)
          (local.get 0)
          (local.get 1)
          (i64.add)
          (i64.add)
          (i64.add)
          (i64.add)
          (i64.add)
          (i64.add)
          (i64.add)
          (i64.add)
          (i64.add)
          (i64.const 499_999_500_000)
          (i64.ne)
          (local.tee 9)
          (br_if 1)
          (return)
        )
        (else)
      )
      (unreachable)
    )
    (local.get 9)
    (call 2)
    (unreachable)
  )
  (func $4
    (type 0)
    (local i64 i64)
    (local.get 0)
    (i32.eqz)
    (if (then (local.get 1) (call $wasmfx_yield) (i64.const -1) (return)) (else))
    (local.get 1)
    (i64.const 10)
    (i64.mul)
    (local.tee 1)
    (i64.const -11)
    (i64.le_u)
    (if
      (then
        (local.get 0)
        (i32.const 1)
        (i32.sub)
        (local.set 0)
        (local.get 1)
        (i64.const 10)
        (i64.add)
        (local.set 3)
        (loop
          (local.get 0)
          (local.get 1)
          (call $wasmfx_handle)
          (local.get 2)
          (i64.add)
          (local.set 2)
          (local.get 1)
          (i64.const 1)
          (i64.add)
          (local.tee 1)
          (local.get 3)
          (i64.lt_u)
          (br_if 0)
        )
      )
      (else)
    )
    (local.get 2)
  )

  (func $wasmfx_yield (export "wasmfx_yield") (param $i i64)
    (suspend $yield (local.get $i)))

  (func $wasmfx_handle (export "wasmfx_handle")
    (param $level i32)
    (param $num i64)
    (result i64)
      (block $on_yield (result i64 (ref $cyield))
        (resume $ct (tag $yield $on_yield)
          (local.get $level)
          (local.get $num)
          (cont.new $ct (ref.func 4)))
        (return)
      ) ;; on_yield, stack is [ i64, ref $cyield ]
      (resume $cyield) ;; clean-up the stack, discard the dummy value
      (drop) ;; discard the dummy value
      ;; return the i64 provided by yield.
  )

  (export "memory" (memory 0))
  (export "_start" (func 3))
  (export "skynet" (func 4))
)
