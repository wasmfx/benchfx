(module
  (type $0 (func (param i32)))
  (type $1 (func (param i32) (result i32)))
  (type $2 (func (param i32 i32) (result i32)))
  (type $3 (func))

  (type $awt (func (param i32) (result i32)))
  (type $cawt (cont $awt))

  ;; (import "env" "async_worker_yield" (func $0 (type 1)))
  ;; (import "env" "alloc_async_worker" (func $1 (type 0)))
  ;; (import "env" "resume_async_worker" (func $2 (type 2)))
  ;; (import "env" "free_async_worker" (func $3 (type 0)))

  (import "wasi_snapshot_preview1" "proc_exit" (func $0 (type 0)))
  (import "wasi_snapshot_preview1" "proc_exit" (func $1 (type 0)))
  (import "wasi_snapshot_preview1" "proc_exit" (func $2 (type 0)))
  (import "wasi_snapshot_preview1" "proc_exit" (func $3 (type 0)))

  (import "wasi_snapshot_preview1" "proc_exit" (func $4 (type 0)))

  (tag $yield (param i32) (result i32))

  (table $conts 10000 (ref null $cawt)) ;; Update size to match dataset size.

  (memory $0 2)
  (global $0 (mut i32) (i32.const 66_576))
  (func $5
    (type 3)
    (local i32 i32 i32 i32 i32)
    (block
      (i32.const 1_024)
      (i32.load)
      (i32.eqz)
      (if
        (then
          (i32.const 1_024)
          (i32.const 1)
          (i32.store)
          (loop
            (local.get 0)
            (call $alloc_async_worker)
            (local.get 0)
            (i32.const 1)
            (i32.add)
            (local.tee 0)
            (i32.const 10_000)
            (i32.ne)
            (br_if 0)
          )
          (i32.const 10_000_000)
          (local.set 3)
          (i32.const 0)
          (local.set 0)
          (loop
            (local.get 0)
            (local.get 0)
            (i32.const 10_000)
            (i32.div_u)
            (i32.const 10_000)
            (i32.mul)
            (i32.sub)
            (local.tee 2)
            (i32.const 32)
            (call $resume_async_worker)
            (drop)
            (local.get 2)
            (i32.const 32)
            (call $resume_async_worker)
            (local.set 4)
            (local.get 2)
            (call $free_async_worker)
            (local.get 2)
            (call $alloc_async_worker)
            (local.get 0)
            (i32.const 1)
            (i32.add)
            (local.set 0)
            (local.get 1)
            (local.get 4)
            (i32.add)
            (local.set 1)
            (local.get 3)
            (i32.const 1)
            (i32.sub)
            (local.tee 3)
            (br_if 0)
          )
          (i32.const 0)
          (local.set 0)
          (loop
            (local.get 0)
            (i32.const 32)
            (call $resume_async_worker)
            (drop)
            (local.get 0)
            (i32.const 32)
            (call $resume_async_worker)
            (local.set 2)
            (local.get 0)
            (call $free_async_worker)
            (local.get 1)
            (local.get 2)
            (i32.add)
            (local.set 1)
            (local.get 0)
            (i32.const 1)
            (i32.add)
            (local.tee 0)
            (i32.const 10_000)
            (i32.ne)
            (br_if 0)
          )
          (local.get 1)
          (i32.const 10_010_000)
          (i32.ne)
          (local.tee 0)
          (br_if 1)
          (return)
        )
        (else)
      )
      (unreachable)
    )
    (local.get 0)
    (call 4)
    (unreachable)
  )
  (func $6
    (type 1)
    (local i32 i32 i32 i32 i32)
    (local.get 0)
    (call $async_worker_yield)
    (local.set 0)
    (global.get 0)
    (i32.const 16)
    (i32.sub)
    (local.tee 1)
    (global.set 0)
    (global.get 0)
    (i32.const 4)
    (i32.sub)
    (local.set 4)
    (block
      (local.get 0)
      (i32.const 10)
      (i32.shl)
      (i32.const 4_095)
      (i32.add)
      (local.tee 0)
      (i32.const 4_096)
      (i32.lt_u)
      (br_if 0)
      (local.get 0)
      (i32.const 12)
      (i32.shr_u)
      (local.tee 2)
      (i32.const 3)
      (i32.and)
      (local.set 3)
      (local.get 2)
      (i32.const 1)
      (i32.sub)
      (i32.const 3)
      (i32.ge_u)
      (if
        (then
          (local.get 4)
          (i32.const 12_288)
          (i32.sub)
          (local.set 0)
          (local.get 2)
          (i32.const 1_048_572)
          (i32.and)
          (local.set 2)
          (loop
            (local.get 1)
            (local.get 0)
            (i32.const 12_288)
            (i32.add)
            (i32.load8_u)
            (i32.store8 offset=15)
            (local.get 1)
            (local.get 0)
            (i32.const -8_192)
            (i32.sub)
            (i32.load8_u)
            (i32.store8 offset=15)
            (local.get 1)
            (local.get 0)
            (i32.const 4_096)
            (i32.add)
            (i32.load8_u)
            (i32.store8 offset=15)
            (local.get 1)
            (local.get 0)
            (i32.load8_u)
            (i32.store8 offset=15)
            (local.get 0)
            (i32.const 16_384)
            (i32.sub)
            (local.set 0)
            (local.get 2)
            (local.get 5)
            (i32.const 4)
            (i32.add)
            (local.tee 5)
            (i32.ne)
            (br_if 0)
          )
        )
        (else)
      )
      (local.get 3)
      (i32.eqz)
      (br_if 0)
      (local.get 4)
      (local.get 5)
      (i32.const 12)
      (i32.shl)
      (i32.sub)
      (local.set 0)
      (loop
        (local.get 1)
        (local.get 0)
        (i32.load8_u)
        (i32.store8 offset=15)
        (local.get 0)
        (i32.const 4_096)
        (i32.sub)
        (local.set 0)
        (local.get 3)
        (i32.const 1)
        (i32.sub)
        (local.tee 3)
        (br_if 0)
      )
    )
    (local.get 1)
    (i32.const 16)
    (i32.add)
    (global.set 0)
    (i32.const 1)
  )

  (func $async_worker_yield (export "async_worker_yield") (param $value i32) (result i32)
    (suspend $yield (local.get $value))
  )

  (func $alloc_async_worker (param $key i32)
    (table.set $conts (local.get $key)
       (cont.new $cawt (ref.func 6)))
  )

  (func $resume_async_worker (param $key i32) (param $value i32) (result i32)
    (local $k (ref null $cawt))
    (block $on_return (result i32)
      (block $on_yield (result i32 (ref $cawt))
        (resume $cawt (tag $yield $on_yield) (local.get $value) (table.get $conts (local.get $key)))
        (br $on_return)
      ) ;; on_yield [ i32 (ref $cawt) ]
      (local.set $k)
      (table.set $conts (local.get $key) (local.get $k))
    ) ;; on_return
  )

  (func $free_async_worker (param $key i32))

  (export "memory" (memory 0))
  (export "_start" (func 5))
  (export "async_worker" (func 6))
)
